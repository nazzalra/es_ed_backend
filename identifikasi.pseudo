function Identifikasi (input id_gejala : Array) -> Array
{ Mengembalikan nilai kesimpulan identifikasi bertipe Array yang berisi jenis gangguan beserta nilai keyakinan berdasarkan id_gejala yang diinputkan }
 
DEKLARASI
	m1,m2,m3 : Array
	daftar_aturan : Array
    type Aturan : record <
        gangguan        : Gangguan
        nilai_keyakinan : float[0..1]
    >
	function getAturanGejala (input gejala : Array) -> Array
    { Memperoleh nilai aturan untuk setiap gejala }
    
    function setBPA(input aturan : Aturan) -> Array
    { Menentukan nilai BPA (bertipe array) yang berisi nilai aturan beserta nilai fod nya }

    function setBPAFrom(input m : Array) -> Array
    { Menentukan nilai BPA (bertipe array) berdasarkan nilai BPA lain yang diinputkan (untuk keperluan konversi) }

    function getKey(input x : Aturan, input y : Aturan) -> String
    { Menentukan key dari hasil irisan antara himpunan gangguan pada x dan y, jika tidak ada irisan maka fungsi akan mengembalikan 'himpunan_kosong' }

    function hitungAturanDempster(input m : Array) -> Array
    { Menghitung  }
	

ALGORITMA:
    daftar_aturan = dapatkanAturan(gejala)	        { akses database untuk peroleh nilai aturan untuk setiap gejala }
    m3 = []                                         { reset nilai m3 }
    while daftar_aturan is not empty do             { lakukan pengulangan selama daftar_aturan tidak kosong }
        m1 = tentukanBPA(ambilDari(daftar_aturan))
        if m3 is empty then                         { jika nilai m3 kosong maka }
            m2 = tentukanBPA(ambilDari(daftar_aturan))               { tentukan BPA yang data inputnya ambil dari daftar_aturan }
        else
            m2 = setBPAFrom(m3)
        endif
        m3 <- hitungAturanDempster(m3)
    endwhile
    return getKesimpulan(m3)